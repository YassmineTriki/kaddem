pipeline {
    agent any
    tools {
        jdk 'JDK-17'
        maven 'Maven-3.9'
    }
    environment {
        TEST_PROFILE = '-Dspring.profiles.active=test'
        DOCKER_IMAGE = "kaddem-app"
        DOCKER_TAG = "${env.BUILD_ID}"
    }
    stages {
        // Étape 1: Clonage du projet
        stage('Checkout Git') {
            steps {
                git branch: 'master',
                url: 'https://github.com/YassmineTriki/kaddem.git',
                credentialsId: 'github-credentials'
            }
        }

        // Étape 2: Nettoyage et compilation
        stage('Build') {
            steps {
                sh '''
                    echo "Nettoyage du projet..."
                    rm -rf target/
                    ./mvnw clean compile -DskipTests
                '''
            }
        }

        // Étape 3: Tests unitaires avec H2
        stage('Unit Tests') {
            steps {
                sh """
                    ./mvnw test $TEST_PROFILE \\
                    -Dspring.datasource.url=jdbc:h2:mem:testdb \\
                    -Dspring.datasource.username=sa \\
                    -Dspring.datasource.password= \\
                    -Dspring.jpa.hibernate.ddl-auto=create-drop \\
                    -Dspring.jpa.show-sql=true
                """
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                    archiveArtifacts artifacts: '**/target/surefire-reports/*.txt', allowEmptyArchive: true
                }
            }
        }

        // Étape 4: Packaging final
        stage('Package') {
            steps {
                sh './mvnw clean package -DskipTests'
                sh 'ls -l target/*.war'
            }
        }

        // Étape 5: Analyse SonarQube
        stage('SonarQube Analysis') {
                           steps {
                                 withSonarQubeEnv('SonarQube-Server') {
                                     sh 'mvn sonar:sonar -Dsonar.projectKey=kaddem'
                                 }

                             }
        }

        // Étape 6: Déploiement sur Nexus
         stage('Nexus') {
                      steps {
                            nexusArtifactUploader(
                                        artifacts: [[
                                            artifactId: 'kaddem', // Doit matcher <artifactId>
                                            file: 'target/kaddem-0.0.1-SNAPSHOT.war', // Nom exact
                                            type: 'war' // Spring Boot génère un .jar par défaut
                                        ]],
                                        credentialsId: 'nexus',
                                        groupId: 'tn.esprit.spring', // Doit matcher <groupId>
                                        nexusUrl: 'localhost:8081',
                                        nexusVersion: 'nexus3',
                                        protocol: 'http',
                                        repository: 'maven-snapshots',
                                        version: '0.0.1-SNAPSHOT' // Doit matcher <version>
                            )

                      }
                  }

        // Étape 7: Construction et déploiement Docker
        stage('Build and Deploy') {
                    steps {
                        script {
                            // Configuration des variables
                            def IMAGE_NAME = "yasmine251/kaddem-app"
                            def IMAGE_TAG = env.BUILD_ID

                            // 1. Construction de l'image Docker (compatible WSL/Windows)
                            sh """
                                docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
                            """

                            // 2. Publication optionnelle sur Docker Hub
                            if (env.DOCKER_REGISTRY) {
                                docker.withRegistry("https://${env.DOCKER_REGISTRY}", 'DOCKER_HUB_CREDS') {
                                    sh """
                                        docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${env.DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}
                                        docker push ${env.DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}
                                    """
                                }
                            }

                            // 3. Déploiement avec docker-compose (universel)
                            sh """
                                # Mise à jour de l'image dans docker-compose.yml
                                sed -i 's|image:.*|image: ${IMAGE_NAME}:${IMAGE_TAG}|g' docker-compose.yml

                                # Redémarrage des containers
                                docker-compose down || true
                                docker system prune -f
                                docker-compose up -d --build

                                # Vérification
                                docker-compose ps
                                echo "Déploiement réussi! Version ${IMAGE_TAG}"
                            """
                        }
                    }
        }
    }
    post {
        always {
            cleanWs()
        }
        success {
            slackSend(color: 'good', message: "Build ${env.BUILD_NUMBER} réussi!")
        }
        failure {
            slackSend(color: 'danger', message: "Build ${env.BUILD_NUMBER} a échoué!")
        }
    }
}