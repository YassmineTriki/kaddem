pipeline {
    agent any
    tools {
        jdk 'JDK-17'      // Nom de votre JDK configuré dans Jenkins
        maven 'Maven-3.9'
    }
     environment {
            TEST_PROFILE = '-Dspring.profiles.active=test'
            IMAGE_NAME = 'kaddemback'
            IMAGE_TAG = 'latest'
             DOCKER_REGISTRY = 'docker.io'
                   DOCKER_HUB_NAMESPACE = 'yasmine251'
        }

    stages {
     stage('clean workspace')
            {
                steps{
                    cleanWs()
                     }
            }
        // Étape 1 : Récupération du code
        stage('Checkout Git') {
            steps {
                git branch: 'master', url: 'https://github.com/YassmineTriki/kaddem.git'
            }
        }
        /* Étape 2 - Build */
        stage('Build') {
              steps {
                  sh 'ls -l mvnw'
                  sh './mvnw clean compile -DskipTests'
              }
        }
        /* Étape 3 - Tests Unitaires (nouveau) */
         stage('Unit Tests') {
                    steps {
                         sh """
                         ./mvnw test $TEST_PROFILE \
                         -Dspring.datasource.url=jdbc:h2:mem:testdb \
                         -Dspring.jpa.hibernate.ddl-auto=create-drop
                         """
                    }
                    post {
                        always {
                            junit '**/target/surefire-reports/*.xml'  // Publie les rapports JUnit
                              archiveArtifacts artifacts: '**/target/surefire-reports/*.txt', allowEmptyArchive: true
                        }
                    }
         }
          /* Étape 4 - Packaging final */
          stage('Package') {
                        steps {
                            sh './mvnw clean package -DskipTests'
                            // Vérification que le WAR est généré
                            sh 'ls -l target/*.war'
                        }
                    }
          // Étape 4: Analyse SonarQube
          stage('SonarQube Analysis') {
                   steps {
                         withSonarQubeEnv('SonarQube-Server') {
                             sh 'mvn sonar:sonar -Dsonar.projectKey=kaddem'
                         }

                     }
          }
          // Étape 5: Nexus

          stage('Nexus') {
              steps {
                    nexusArtifactUploader(
                                artifacts: [[
                                    artifactId: 'kaddem', // Doit matcher <artifactId>
                                    file: 'target/kaddem-0.0.1-SNAPSHOT.war', // Nom exact
                                    type: 'war' // Spring Boot génère un .jar par défaut
                                ]],
                                credentialsId: 'nexus',
                                groupId: 'tn.esprit.spring', // Doit matcher <groupId>
                                nexusUrl: 'localhost:8081',
                                nexusVersion: 'nexus3',
                                protocol: 'http',
                                repository: 'maven-snapshots',
                                version: '0.0.1-SNAPSHOT' // Doit matcher <version>
                    )

              }
          }

       stage('Build Docker Image') {
                  steps {
                      script {
                          sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
                      }
                  }
              }

      stage('docker login') {
          steps {
              withCredentials([usernamePassword(
                  credentialsId: 'DOCKER_HUB_CREDS',  // ID de vos credentials dans Jenkins
                  usernameVariable: 'yasmine251',  // Votre username Docker Hub
                  passwordVariable: 'yasmine'   // Votre token Docker Hub
              )]) {
                  sh '''
                      echo "$DOCKER_PWD" | docker login -u "$DOCKER_USER" --password-stdin
                  '''
              }
          }
      }

      stage('docker build and push') {
          steps {
              script {
                  // 1. Build avec votre nom de compte et le nom de votre image
                  def imageName = "yasmine251/kaddem-app"  // Remplacez 'malekkkk' par votre username
                  def imageTag = "latest"                // Version de votre image

                  sh "docker build -t ${imageName}:${imageTag} ."

                  // 2. Push
                  sh "docker push ${imageName}:${imageTag}"

                  // 3. Nettoyage (optionnel)
                  sh "docker rmi ${imageName}:${imageTag}"
              }
          }
      }

    }


}