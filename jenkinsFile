pipeline {
    agent any
    tools {
        jdk 'JDK-17'      // Nom de votre JDK configuré dans Jenkins
        maven 'Maven-3.9'
    }
    environment {
         // Active le profil 'test' uniquement pour les étapes de test
         TEST_PROFILE = '-Dspring.profiles.active=test'
         DOCKER_IMAGE = "kaddem-app"
         DOCKER_TAG = "${env.BUILD_ID}"       // Utilise le numéro de build Jenkins comme tag
    }
    stages {
        // Étape 1 : Récupération du code
        stage('Checkout Git') {
            steps {
                git branch: 'master', url: 'https://github.com/YassmineTriki/kaddem.git'
            }
        }
        /* Étape 2 - Build */
        stage('Build') {
              steps {
                  sh 'ls -l mvnw'
                  sh './mvnw clean compile -DskipTests'
              }
        }
        /* Étape 3 - Tests Unitaires (nouveau) */
         stage('Unit Tests') {
                    steps {
                         sh """
                         ./mvnw test $TEST_PROFILE \
                         -Dspring.datasource.url=jdbc:h2:mem:testdb \
                         -Dspring.jpa.hibernate.ddl-auto=create-drop
                         """
                    }
                    post {
                        always {
                            junit '**/target/surefire-reports/*.xml'  // Publie les rapports JUnit
                              archiveArtifacts artifacts: '**/target/surefire-reports/*.txt', allowEmptyArchive: true
                        }
                    }
         }
          /* Étape 4 - Packaging final */
          stage('Package') {
                        steps {
                            sh './mvnw clean package -DskipTests'
                            // Vérification que le WAR est généré
                            sh 'ls -l target/*.war'
                        }
                    }
          // Étape 4: Analyse SonarQube
          stage('SonarQube Analysis') {
                   steps {
                         withSonarQubeEnv('SonarQube-Server') {
                             sh 'mvn sonar:sonar -Dsonar.projectKey=kaddem'
                         }

                     }
          }
          // Étape 5: Nexus

          stage('Deploy to Nexus') {
              steps {
                    nexusArtifactUploader(
                                artifacts: [[
                                    artifactId: 'kaddem', // Doit matcher <artifactId>
                                    file: 'target/kaddem-0.0.1-SNAPSHOT.war', // Nom exact
                                    type: 'war' // Spring Boot génère un .jar par défaut
                                ]],
                                credentialsId: 'nexus',
                                groupId: 'tn.esprit.spring', // Doit matcher <groupId>
                                nexusUrl: 'localhost:8081',
                                nexusVersion: 'nexus3',
                                protocol: 'http',
                                repository: 'maven-snapshots',
                                version: '0.0.1-SNAPSHOT' // Doit matcher <version>
                    )

              }
          }

        stage('Deploy') {
            steps {
                script {
                    // 1. Build de l'image Docker avec le bon format
                      def dockerImage = docker.build("yasmine251/kaddem-app:${env.BUILD_ID}", "-f DockerFile --no-cache .")
                    // 2. Publication sur Docker Hub (avec vérification des credentials)
                    docker.withRegistry('https://registry.hub.docker.com', 'DOCKER_HUB_CREDS') {
                        dockerImage.push()
                        echo "Image poussée avec succès vers Docker Hub"
                    }

                    // 3. Mise à jour et déploiement
                    sh """
                        # Mise à jour du docker-compose.yml
                        sed -i 's|image:.*|image: yasmine251/kaddem-app:${env.BUILD_ID}|g' docker-compose.yml

                        # Arrêt et nettoyage
                        docker-compose down || true
                        docker system prune -f

                        # Redémarrage
                        docker-compose up -d --build

                        # Vérification
                        docker-compose ps
                        echo "Déploiement terminé avec succès ! Version ${env.BUILD_ID}"
                    """
                }
            }
        }


    }


}