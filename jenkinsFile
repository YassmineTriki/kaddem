pipeline {
    agent any
    tools {
        jdk 'JDK-17'      // Nom de votre JDK configuré dans Jenkins
        maven 'Maven-3.9'
    }
      environment {
            // Active le profil 'test' uniquement pour les étapes de test
            TEST_PROFILE = '-Dspring.profiles.active=test'
             DOCKER_IMAGE = "kaddem-app"
              DOCKER_TAG = "${env.BUILD_ID}"       // Utilise le numéro de build Jenkins comme tag
        }
    stages {
        // Étape 1 : Récupération du code
        stage('Checkout Git') {
            steps {
                git branch: 'master', url: 'https://github.com/YassmineTriki/kaddem.git'
            }
        }
        /* Étape 2 - Build */
        stage('Build') {
              steps {
                  sh 'ls -l mvnw'
                  sh './mvnw clean compile -DskipTests'
              }
        }
        /* Étape 3 - Tests Unitaires (nouveau) */
         stage('Unit Tests') {
                    steps {
                         sh """
                         ./mvnw test $TEST_PROFILE \
                         -Dspring.datasource.url=jdbc:h2:mem:testdb \
                         -Dspring.jpa.hibernate.ddl-auto=create-drop
                         """
                    }
                    post {
                        always {
                            junit '**/target/surefire-reports/*.xml'  // Publie les rapports JUnit
                              archiveArtifacts artifacts: '**/target/surefire-reports/*.txt', allowEmptyArchive: true
                        }
                    }
         }
          /* Étape 4 - Packaging final */
          stage('Package') {
                        steps {
                            sh './mvnw clean package -DskipTests'
                            // Vérification que le WAR est généré
                            sh 'ls -l target/*.war'
                        }
                    }
          // Étape 4: Analyse SonarQube
          stage('SonarQube Analysis') {
                   steps {
                         withSonarQubeEnv('SonarQube-Server') {
                             sh 'mvn sonar:sonar -Dsonar.projectKey=kaddem'
                         }

                     }
          }
          // Étape 5: Nexus

          stage('Deploy to Nexus') {
              steps {
                    nexusArtifactUploader(
                                artifacts: [[
                                    artifactId: 'kaddem', // Doit matcher <artifactId>
                                    file: 'target/kaddem-0.0.1-SNAPSHOT.war', // Nom exact
                                    type: 'war' // Spring Boot génère un .jar par défaut
                                ]],
                                credentialsId: 'nexus',
                                groupId: 'tn.esprit.spring', // Doit matcher <groupId>
                                nexusUrl: 'localhost:8081',
                                nexusVersion: 'nexus3',
                                protocol: 'http',
                                repository: 'maven-snapshots',
                                version: '0.0.1-SNAPSHOT' // Doit matcher <version>
                    )

              }
          }
          stage('Build Docker Image') {
              steps {
                  script {
                      // Vérifie que le war existe
                      def warFile = findFiles(glob: 'target/*.war')[0]
                      echo "Fichier war trouvé : ${warFile.name}"

                      // Build l'image
                      docker.build("kaddem-app:${env.BUILD_ID}")

                  }
              }
          }

          stage('Generate docker-compose.yml') {
              steps {
                  script {
                      // Crée le fichier docker-compose.yml avec l'image Docker Hub/GHCR
                      writeFile(
                          file: 'docker-compose.yml',
                          text: """
                          version: '3.8'
                          services:
                            kaddem-app:
                              image: ${DOCKER_IMAGE}:${DOCKER_TAG}  # Ex: "votredockerhub/kaddem-app:latest"
                              ports:
                                - "8080:8080"
                          """
                      )

                      // Pousse le fichier dans Git (si besoin)
                      sh """
                          git add docker-compose.yml
                          git commit -m "Add docker-compose.yml for version ${DOCKER_TAG}"
                          git push origin master
                      """
                  }
              }
          }
    }


}