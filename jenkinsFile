pipeline {
    agent any
    tools {
        jdk 'JDK-17'      // Nom de votre JDK configuré dans Jenkins
        maven 'Maven-3.9'
    }
     environment {
            TEST_PROFILE = '-Dspring.profiles.active=test'
            IMAGE_NAME = 'yasmine251/kaddemback'
            IMAGE_TAG = 'latest'
            DOCKER_REGISTRY = 'docker.io' // exemple: 'dockerhub' ou vide si pas de push
            DOCKER_HUB_CREDENTALS = credentials("cred_docker")
     }

    stages {
         stage('clean workspace')
                    {
                        steps{
                            cleanWs()
                        }
                    }
         // Étape 1 : Récupération du code
         stage('Checkout Git') {
                steps {
                    git branch: 'master', url: 'https://github.com/YassmineTriki/kaddem.git'
                }
         }
        /* Étape 2 - Build */
        stage('Build') {
              steps {
                  sh 'ls -l mvnw'
                  sh './mvnw clean compile -DskipTests'
              }
        }

        /* Étape 3 - Tests Unitaires (nouveau)*/
         stage('Unit Tests') {
                    steps {
                         sh """
                         ./mvnw test $TEST_PROFILE \
                         -Dspring.datasource.url=jdbc:h2:mem:testdb \
                         -Dspring.jpa.hibernate.ddl-auto=create-drop
                         """
                    }
                    post {
                        always {
                            junit '**/target/surefire-reports/*.xml'  // Publie les rapports JUnit
                              archiveArtifacts artifacts: '**/target/surefire-reports/*.txt', allowEmptyArchive: true
                        }
                    }
         }
          /* Étape 4 - Packaging final */
          stage('Package') {
                        steps {
                            sh './mvnw clean package -DskipTests'
                            // Vérification que le WAR est généré
                            sh 'ls -l target/*.war'
                        }
          }
          // Étape 4: Analyse SonarQube
          stage('SonarQube Analysis') {
                   steps {
                         withSonarQubeEnv('SonarQube-Server') {
                             sh 'mvn sonar:sonar -Dsonar.projectKey=kaddem'
                         }

                     }
          }
          // Étape 5: Nexus

          stage('Nexus') {
              steps {
                    nexusArtifactUploader(
                                artifacts: [[
                                    artifactId: 'kaddem',
                                    file: 'target/kaddem-0.0.1-SNAPSHOT.war', // Nom exact
                                    type: 'war' // Spring Boot génère un .war par défaut
                                ]],
                                credentialsId: 'nexus',
                                groupId: 'tn.esprit.spring', // Doit matcher <groupId>
                                nexusUrl: 'localhost:8081',
                                nexusVersion: 'nexus3',
                                protocol: 'http',
                                repository: 'maven-snapshots',
                                version: '0.0.1-SNAPSHOT' // Doit matcher <version>
                    )

              }
          }

        stage('Build Docker Image') {
                  steps {
                      script {
                         sh "docker build -t ${env.IMAGE_NAME}:${env.IMAGE_TAG} ."
                      }
                  }
        }

      stage('Push Docker Image') {
      steps {
      sh "docker login -u ${DOCKER_HUB_CREDENTALS_USR} -p ${DOCKER_HUB_CREDENTALS_PSW}"
                            script {
                                def fullImage = "${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}"
                                sh "docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${fullImage}"
                                sh "docker push ${fullImage}"

                            }
                        }
          /*steps {
              sh "docker login -u ${DOCKER_HUB_CREDENTALS_USR} -p ${DOCKER_HUB_CREDENTALS_PSW}"

              script {
                  def fullImage = "${env.IMAGE_NAME}:${env.IMAGE_TAG}"
                  sh """
                      docker tag ${env.IMAGE_NAME}:${env.IMAGE_TAG} ${fullImage}
                      docker push --quiet ${fullImage}  && echo "Push successful"
                  """
              }
          }*/
      }
    }
post{
    always{
        sh 'docker logout'
    }
}

}