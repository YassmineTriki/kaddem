pipeline {
    agent any
    tools {
        jdk 'JDK-17'      // Nom de votre JDK configuré dans Jenkins
        maven 'Maven-3.9'
    }
      environment {
            // Active le profil 'test' uniquement pour les étapes de test
            TEST_PROFILE = '-Dspring.profiles.active=test'
        }
    stages {
        // Étape 1 : Récupération du code
        stage('Checkout Git') {
            steps {
                git branch: 'master', url: 'https://github.com/YassmineTriki/kaddem.git'
            }
        }
        /* Étape 2 - Build */
        stage('Build') {
              steps {
                  sh 'ls -l mvnw'
                  sh './mvnw clean compile -DskipTests'
              }
        }
        /* Étape 3 - Tests Unitaires (nouveau) */
         stage('Unit Tests') {
                    steps {
                         sh """
                         ./mvnw test $TEST_PROFILE \
                         -Dspring.datasource.url=jdbc:h2:mem:testdb \
                         -Dspring.jpa.hibernate.ddl-auto=create-drop
                         """
                    }
                    post {
                        always {
                            junit '**/target/surefire-reports/*.xml'  // Publie les rapports JUnit
                              archiveArtifacts artifacts: '**/target/surefire-reports/*.txt', allowEmptyArchive: true
                        }
                    }
         }
          /* Étape 4 - Packaging final */
          stage('Package') {
                steps {
                       sh './mvnw package -DskipTests'
                }
          }
          // Étape 4: Analyse SonarQube
          stage('SonarQube Analysis') {
                   steps {
                         withSonarQubeEnv('SonarQube-Server') {
                             sh 'mvn sonar:sonar -Dsonar.projectKey=kaddem'
                         }

                     }
          }
          // Étape 5: Nexus
         stage('Package') {
             steps {
                 sh './mvnw clean package -DskipTests'
                 // Vérification que le WAR est généré
                 sh 'ls -l target/*.war'
             }
         }

         stage('Deploy to Nexus') {
             steps {
                 script {
                     // Trouve le fichier WAR généré
                     def warFile = sh(script: 'ls target/*.war', returnStdout: true).trim()

                     nexusArtifactUploader(
                         artifacts: [[
                             artifactId: 'kaddem',
                             file: warFile,
                             type: 'war' // Spécifiez bien le type WAR
                         ]],
                         credentialsId: 'nexus',
                         groupId: 'tn.esprit.spring',
                         nexusUrl: 'localhost:8081',
                         nexusVersion: 'nexus3',
                         protocol: 'http',
                         repository: 'maven-snapshots',
                         version: '1.0.1-SNAPSHOT' // Doit matcher votre version
                     )
                 }
             }
         }
          stage('Build Docker Image') {
              steps {
                  script {
                      // Vérifie que le JAR existe
                      def jarFile = findFiles(glob: 'target/*.jar')[0]
                      echo "Fichier JAR trouvé : ${jarFile.name}"

                      // Crée le Dockerfile dynamiquement
                      writeFile file: 'Dockerfile', text: """
                          FROM eclipse-temurin:17-jdk-jammy
                          WORKDIR /app
                          COPY ${jarFile.path} app.jar
                          ENTRYPOINT ["java", "-jar", "app.jar"]
                      """

                      // Build l'image
                      docker.build("kaddem-app:${env.BUILD_ID}")

                  }
              }
          }
    }


}